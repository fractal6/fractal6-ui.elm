-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Object.ProjectCard exposing (..)

import Fractal.InputObject
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Fractal.ScalarCodecs.Id Fractal.Object.ProjectCard
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Fractal.ScalarCodecs.codecs |> Fractal.Scalar.unwrapCodecs |> .codecId |> .decoder)


pos : SelectionSet Int Fractal.Object.ProjectCard
pos =
    Object.selectionForField "Int" "pos" [] Decode.int


type alias CardOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.CardKindFilter }


card :
    (CardOptionalArguments -> CardOptionalArguments)
    -> SelectionSet decodesTo Fractal.Union.CardKind
    -> SelectionSet decodesTo Fractal.Object.ProjectCard
card fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeCardKindFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "card" optionalArgs____ object____ Basics.identity


type alias PcOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.ProjectColumnFilter }


pc :
    (PcOptionalArguments -> PcOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.ProjectColumn
    -> SelectionSet decodesTo Fractal.Object.ProjectCard
pc fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeProjectColumnFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pc" optionalArgs____ object____ Basics.identity


type alias ValuesOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.ProjectFieldValueFilter
    , order : OptionalArgument Fractal.InputObject.ProjectFieldValueOrder
    , first : OptionalArgument Int
    , offset : OptionalArgument Int
    }


values :
    (ValuesOptionalArguments -> ValuesOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.ProjectFieldValue
    -> SelectionSet (Maybe (List decodesTo)) Fractal.Object.ProjectCard
values fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, order = Absent, first = Absent, offset = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeProjectFieldValueFilter, Argument.optional "order" filledInOptionals____.order Fractal.InputObject.encodeProjectFieldValueOrder, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "values" optionalArgs____ object____ (Basics.identity >> Decode.list >> Decode.nullable)


type alias ValuesAggregateOptionalArguments =
    { filter : OptionalArgument Fractal.InputObject.ProjectFieldValueFilter }


valuesAggregate :
    (ValuesAggregateOptionalArguments -> ValuesAggregateOptionalArguments)
    -> SelectionSet decodesTo Fractal.Object.ProjectFieldValueAggregateResult
    -> SelectionSet (Maybe decodesTo) Fractal.Object.ProjectCard
valuesAggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Fractal.InputObject.encodeProjectFieldValueFilter ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "valuesAggregate" optionalArgs____ object____ (Basics.identity >> Decode.nullable)

-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.CardKindType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CardKindType
    = Tension
    | ProjectDraft


list : List CardKindType
list =
    [ Tension, ProjectDraft ]


decoder : Decoder CardKindType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Tension" ->
                        Decode.succeed Tension

                    "ProjectDraft" ->
                        Decode.succeed ProjectDraft

                    _ ->
                        Decode.fail ("Invalid CardKindType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CardKindType -> String
toString enum____ =
    case enum____ of
        Tension ->
            "Tension"

        ProjectDraft ->
            "ProjectDraft"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CardKindType
fromString enumString____ =
    case enumString____ of
        "Tension" ->
            Just Tension

        "ProjectDraft" ->
            Just ProjectDraft

        _ ->
            Nothing

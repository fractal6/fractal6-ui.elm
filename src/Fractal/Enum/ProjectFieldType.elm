-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.ProjectFieldType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ProjectFieldType
    = Int
    | String
    | Date
    | SingleSelect


list : List ProjectFieldType
list =
    [ Int, String, Date, SingleSelect ]


decoder : Decoder ProjectFieldType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "INT" ->
                        Decode.succeed Int

                    "STRING" ->
                        Decode.succeed String

                    "DATE" ->
                        Decode.succeed Date

                    "SINGLE_SELECT" ->
                        Decode.succeed SingleSelect

                    _ ->
                        Decode.fail ("Invalid ProjectFieldType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ProjectFieldType -> String
toString enum____ =
    case enum____ of
        Int ->
            "INT"

        String ->
            "STRING"

        Date ->
            "DATE"

        SingleSelect ->
            "SINGLE_SELECT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ProjectFieldType
fromString enumString____ =
    case enumString____ of
        "INT" ->
            Just Int

        "STRING" ->
            Just String

        "DATE" ->
            Just Date

        "SINGLE_SELECT" ->
            Just SingleSelect

        _ ->
            Nothing

-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Enum.TensionHasFilter exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TensionHasFilter
    = CreatedBy
    | CreatedAt
    | UpdatedAt
    | Message
    | Emitter
    | Emitterid
    | Receiver
    | Receiverid
    | Title
    | Type_
    | Status
    | Action
    | Assignees
    | Labels
    | Comments
    | Blobs
    | History
    | Mentions
    | Contracts
    | Subscribers
    | Project_statuses
    | N_comments


list : List TensionHasFilter
list =
    [ CreatedBy, CreatedAt, UpdatedAt, Message, Emitter, Emitterid, Receiver, Receiverid, Title, Type_, Status, Action, Assignees, Labels, Comments, Blobs, History, Mentions, Contracts, Subscribers, Project_statuses, N_comments ]


decoder : Decoder TensionHasFilter
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdBy" ->
                        Decode.succeed CreatedBy

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "message" ->
                        Decode.succeed Message

                    "emitter" ->
                        Decode.succeed Emitter

                    "emitterid" ->
                        Decode.succeed Emitterid

                    "receiver" ->
                        Decode.succeed Receiver

                    "receiverid" ->
                        Decode.succeed Receiverid

                    "title" ->
                        Decode.succeed Title

                    "type_" ->
                        Decode.succeed Type_

                    "status" ->
                        Decode.succeed Status

                    "action" ->
                        Decode.succeed Action

                    "assignees" ->
                        Decode.succeed Assignees

                    "labels" ->
                        Decode.succeed Labels

                    "comments" ->
                        Decode.succeed Comments

                    "blobs" ->
                        Decode.succeed Blobs

                    "history" ->
                        Decode.succeed History

                    "mentions" ->
                        Decode.succeed Mentions

                    "contracts" ->
                        Decode.succeed Contracts

                    "subscribers" ->
                        Decode.succeed Subscribers

                    "project_statuses" ->
                        Decode.succeed Project_statuses

                    "n_comments" ->
                        Decode.succeed N_comments

                    _ ->
                        Decode.fail ("Invalid TensionHasFilter type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TensionHasFilter -> String
toString enum____ =
    case enum____ of
        CreatedBy ->
            "createdBy"

        CreatedAt ->
            "createdAt"

        UpdatedAt ->
            "updatedAt"

        Message ->
            "message"

        Emitter ->
            "emitter"

        Emitterid ->
            "emitterid"

        Receiver ->
            "receiver"

        Receiverid ->
            "receiverid"

        Title ->
            "title"

        Type_ ->
            "type_"

        Status ->
            "status"

        Action ->
            "action"

        Assignees ->
            "assignees"

        Labels ->
            "labels"

        Comments ->
            "comments"

        Blobs ->
            "blobs"

        History ->
            "history"

        Mentions ->
            "mentions"

        Contracts ->
            "contracts"

        Subscribers ->
            "subscribers"

        Project_statuses ->
            "project_statuses"

        N_comments ->
            "n_comments"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TensionHasFilter
fromString enumString____ =
    case enumString____ of
        "createdBy" ->
            Just CreatedBy

        "createdAt" ->
            Just CreatedAt

        "updatedAt" ->
            Just UpdatedAt

        "message" ->
            Just Message

        "emitter" ->
            Just Emitter

        "emitterid" ->
            Just Emitterid

        "receiver" ->
            Just Receiver

        "receiverid" ->
            Just Receiverid

        "title" ->
            Just Title

        "type_" ->
            Just Type_

        "status" ->
            Just Status

        "action" ->
            Just Action

        "assignees" ->
            Just Assignees

        "labels" ->
            Just Labels

        "comments" ->
            Just Comments

        "blobs" ->
            Just Blobs

        "history" ->
            Just History

        "mentions" ->
            Just Mentions

        "contracts" ->
            Just Contracts

        "subscribers" ->
            Just Subscribers

        "project_statuses" ->
            Just Project_statuses

        "n_comments" ->
            Just N_comments

        _ ->
            Nothing

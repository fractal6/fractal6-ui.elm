-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Fractal.Mutation exposing (..)

import Fractal.InputObject
import Fractal.Interface
import Fractal.Object
import Fractal.Scalar
import Fractal.ScalarCodecs
import Fractal.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AddNodeOptionalArguments =
    { upsert : OptionalArgument Bool }


type alias AddNodeRequiredArguments =
    { input : List Fractal.InputObject.AddNodeInput }


addNode :
    (AddNodeOptionalArguments -> AddNodeOptionalArguments)
    -> AddNodeRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddNodePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addNode fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { upsert = Absent }

        optionalArgs____ =
            [ Argument.optional "upsert" filledInOptionals____.upsert Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "addNode" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddNodeInput |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateNodeRequiredArguments =
    { input : Fractal.InputObject.UpdateNodeInput }


updateNode :
    UpdateNodeRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateNodePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateNode requiredArgs____ object____ =
    Object.selectionForCompositeField "updateNode" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateNodeInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteNodeRequiredArguments =
    { filter : Fractal.InputObject.NodeFilter }


deleteNode :
    DeleteNodeRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteNodePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteNode requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteNode" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeNodeFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddNodeFragmentRequiredArguments =
    { input : List Fractal.InputObject.AddNodeFragmentInput }


addNodeFragment :
    AddNodeFragmentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddNodeFragmentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addNodeFragment requiredArgs____ object____ =
    Object.selectionForCompositeField "addNodeFragment" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddNodeFragmentInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateNodeFragmentRequiredArguments =
    { input : Fractal.InputObject.UpdateNodeFragmentInput }


updateNodeFragment :
    UpdateNodeFragmentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateNodeFragmentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateNodeFragment requiredArgs____ object____ =
    Object.selectionForCompositeField "updateNodeFragment" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateNodeFragmentInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteNodeFragmentRequiredArguments =
    { filter : Fractal.InputObject.NodeFragmentFilter }


deleteNodeFragment :
    DeleteNodeFragmentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteNodeFragmentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteNodeFragment requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteNodeFragment" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeNodeFragmentFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddMandateRequiredArguments =
    { input : List Fractal.InputObject.AddMandateInput }


addMandate :
    AddMandateRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddMandatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addMandate requiredArgs____ object____ =
    Object.selectionForCompositeField "addMandate" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddMandateInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateMandateRequiredArguments =
    { input : Fractal.InputObject.UpdateMandateInput }


updateMandate :
    UpdateMandateRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateMandatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateMandate requiredArgs____ object____ =
    Object.selectionForCompositeField "updateMandate" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateMandateInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteMandateRequiredArguments =
    { filter : Fractal.InputObject.MandateFilter }


deleteMandate :
    DeleteMandateRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteMandatePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteMandate requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteMandate" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeMandateFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddLabelRequiredArguments =
    { input : List Fractal.InputObject.AddLabelInput }


addLabel :
    AddLabelRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddLabelPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addLabel requiredArgs____ object____ =
    Object.selectionForCompositeField "addLabel" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddLabelInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateLabelRequiredArguments =
    { input : Fractal.InputObject.UpdateLabelInput }


updateLabel :
    UpdateLabelRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateLabelPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateLabel requiredArgs____ object____ =
    Object.selectionForCompositeField "updateLabel" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateLabelInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteLabelRequiredArguments =
    { filter : Fractal.InputObject.LabelFilter }


deleteLabel :
    DeleteLabelRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteLabelPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteLabel requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteLabel" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeLabelFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddRoleExtRequiredArguments =
    { input : List Fractal.InputObject.AddRoleExtInput }


addRoleExt :
    AddRoleExtRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddRoleExtPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addRoleExt requiredArgs____ object____ =
    Object.selectionForCompositeField "addRoleExt" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddRoleExtInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateRoleExtRequiredArguments =
    { input : Fractal.InputObject.UpdateRoleExtInput }


updateRoleExt :
    UpdateRoleExtRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateRoleExtPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateRoleExt requiredArgs____ object____ =
    Object.selectionForCompositeField "updateRoleExt" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateRoleExtInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteRoleExtRequiredArguments =
    { filter : Fractal.InputObject.RoleExtFilter }


deleteRoleExt :
    DeleteRoleExtRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteRoleExtPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteRoleExt requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteRoleExt" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeRoleExtFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddProjectRequiredArguments =
    { input : List Fractal.InputObject.AddProjectInput }


addProject :
    AddProjectRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddProjectPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addProject requiredArgs____ object____ =
    Object.selectionForCompositeField "addProject" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddProjectInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateProjectRequiredArguments =
    { input : Fractal.InputObject.UpdateProjectInput }


updateProject :
    UpdateProjectRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateProjectPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProject requiredArgs____ object____ =
    Object.selectionForCompositeField "updateProject" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateProjectInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteProjectRequiredArguments =
    { filter : Fractal.InputObject.ProjectFilter }


deleteProject :
    DeleteProjectRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteProjectPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteProject requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteProject" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeProjectFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddProjectColumnRequiredArguments =
    { input : List Fractal.InputObject.AddProjectColumnInput }


addProjectColumn :
    AddProjectColumnRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddProjectColumnPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addProjectColumn requiredArgs____ object____ =
    Object.selectionForCompositeField "addProjectColumn" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddProjectColumnInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateProjectColumnRequiredArguments =
    { input : Fractal.InputObject.UpdateProjectColumnInput }


updateProjectColumn :
    UpdateProjectColumnRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateProjectColumnPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProjectColumn requiredArgs____ object____ =
    Object.selectionForCompositeField "updateProjectColumn" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateProjectColumnInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteProjectColumnRequiredArguments =
    { filter : Fractal.InputObject.ProjectColumnFilter }


deleteProjectColumn :
    DeleteProjectColumnRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteProjectColumnPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteProjectColumn requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteProjectColumn" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeProjectColumnFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddProjectCardRequiredArguments =
    { input : List Fractal.InputObject.AddProjectCardInput }


addProjectCard :
    AddProjectCardRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddProjectCardPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addProjectCard requiredArgs____ object____ =
    Object.selectionForCompositeField "addProjectCard" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddProjectCardInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateProjectCardRequiredArguments =
    { input : Fractal.InputObject.UpdateProjectCardInput }


updateProjectCard :
    UpdateProjectCardRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateProjectCardPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProjectCard requiredArgs____ object____ =
    Object.selectionForCompositeField "updateProjectCard" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateProjectCardInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteProjectCardRequiredArguments =
    { filter : Fractal.InputObject.ProjectCardFilter }


deleteProjectCard :
    DeleteProjectCardRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteProjectCardPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteProjectCard requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteProjectCard" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeProjectCardFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddProjectFieldRequiredArguments =
    { input : List Fractal.InputObject.AddProjectFieldInput }


addProjectField :
    AddProjectFieldRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddProjectFieldPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addProjectField requiredArgs____ object____ =
    Object.selectionForCompositeField "addProjectField" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddProjectFieldInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateProjectFieldRequiredArguments =
    { input : Fractal.InputObject.UpdateProjectFieldInput }


updateProjectField :
    UpdateProjectFieldRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateProjectFieldPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProjectField requiredArgs____ object____ =
    Object.selectionForCompositeField "updateProjectField" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateProjectFieldInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteProjectFieldRequiredArguments =
    { filter : Fractal.InputObject.ProjectFieldFilter }


deleteProjectField :
    DeleteProjectFieldRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteProjectFieldPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteProjectField requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteProjectField" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeProjectFieldFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddProjectFieldValueRequiredArguments =
    { input : List Fractal.InputObject.AddProjectFieldValueInput }


addProjectFieldValue :
    AddProjectFieldValueRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddProjectFieldValuePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addProjectFieldValue requiredArgs____ object____ =
    Object.selectionForCompositeField "addProjectFieldValue" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddProjectFieldValueInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateProjectFieldValueRequiredArguments =
    { input : Fractal.InputObject.UpdateProjectFieldValueInput }


updateProjectFieldValue :
    UpdateProjectFieldValueRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateProjectFieldValuePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProjectFieldValue requiredArgs____ object____ =
    Object.selectionForCompositeField "updateProjectFieldValue" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateProjectFieldValueInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteProjectFieldValueRequiredArguments =
    { filter : Fractal.InputObject.ProjectFieldValueFilter }


deleteProjectFieldValue :
    DeleteProjectFieldValueRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteProjectFieldValuePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteProjectFieldValue requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteProjectFieldValue" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeProjectFieldValueFilter ] object____ (Basics.identity >> Decode.nullable)


type alias UpdatePostRequiredArguments =
    { input : Fractal.InputObject.UpdatePostInput }


updatePost :
    UpdatePostRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdatePostPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updatePost requiredArgs____ object____ =
    Object.selectionForCompositeField "updatePost" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdatePostInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeletePostRequiredArguments =
    { filter : Fractal.InputObject.PostFilter }


deletePost :
    DeletePostRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeletePostPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deletePost requiredArgs____ object____ =
    Object.selectionForCompositeField "deletePost" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodePostFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddProjectDraftRequiredArguments =
    { input : List Fractal.InputObject.AddProjectDraftInput }


addProjectDraft :
    AddProjectDraftRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddProjectDraftPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addProjectDraft requiredArgs____ object____ =
    Object.selectionForCompositeField "addProjectDraft" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddProjectDraftInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateProjectDraftRequiredArguments =
    { input : Fractal.InputObject.UpdateProjectDraftInput }


updateProjectDraft :
    UpdateProjectDraftRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateProjectDraftPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProjectDraft requiredArgs____ object____ =
    Object.selectionForCompositeField "updateProjectDraft" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateProjectDraftInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteProjectDraftRequiredArguments =
    { filter : Fractal.InputObject.ProjectDraftFilter }


deleteProjectDraft :
    DeleteProjectDraftRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteProjectDraftPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteProjectDraft requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteProjectDraft" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeProjectDraftFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddTensionRequiredArguments =
    { input : List Fractal.InputObject.AddTensionInput }


addTension :
    AddTensionRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddTensionPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addTension requiredArgs____ object____ =
    Object.selectionForCompositeField "addTension" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddTensionInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateTensionRequiredArguments =
    { input : Fractal.InputObject.UpdateTensionInput }


updateTension :
    UpdateTensionRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateTensionPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateTension requiredArgs____ object____ =
    Object.selectionForCompositeField "updateTension" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateTensionInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteTensionRequiredArguments =
    { filter : Fractal.InputObject.TensionFilter }


deleteTension :
    DeleteTensionRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteTensionPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteTension requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteTension" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeTensionFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddCommentRequiredArguments =
    { input : List Fractal.InputObject.AddCommentInput }


addComment :
    AddCommentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddCommentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addComment requiredArgs____ object____ =
    Object.selectionForCompositeField "addComment" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddCommentInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateCommentRequiredArguments =
    { input : Fractal.InputObject.UpdateCommentInput }


updateComment :
    UpdateCommentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateCommentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateComment requiredArgs____ object____ =
    Object.selectionForCompositeField "updateComment" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateCommentInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteCommentRequiredArguments =
    { filter : Fractal.InputObject.CommentFilter }


deleteComment :
    DeleteCommentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteCommentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteComment requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteComment" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeCommentFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddReactionOptionalArguments =
    { upsert : OptionalArgument Bool }


type alias AddReactionRequiredArguments =
    { input : List Fractal.InputObject.AddReactionInput }


addReaction :
    (AddReactionOptionalArguments -> AddReactionOptionalArguments)
    -> AddReactionRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddReactionPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addReaction fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { upsert = Absent }

        optionalArgs____ =
            [ Argument.optional "upsert" filledInOptionals____.upsert Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "addReaction" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddReactionInput |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateReactionRequiredArguments =
    { input : Fractal.InputObject.UpdateReactionInput }


updateReaction :
    UpdateReactionRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateReactionPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateReaction requiredArgs____ object____ =
    Object.selectionForCompositeField "updateReaction" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateReactionInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteReactionRequiredArguments =
    { filter : Fractal.InputObject.ReactionFilter }


deleteReaction :
    DeleteReactionRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteReactionPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteReaction requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteReaction" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeReactionFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddBlobRequiredArguments =
    { input : List Fractal.InputObject.AddBlobInput }


addBlob :
    AddBlobRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddBlobPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addBlob requiredArgs____ object____ =
    Object.selectionForCompositeField "addBlob" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddBlobInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateBlobRequiredArguments =
    { input : Fractal.InputObject.UpdateBlobInput }


updateBlob :
    UpdateBlobRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateBlobPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateBlob requiredArgs____ object____ =
    Object.selectionForCompositeField "updateBlob" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateBlobInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteBlobRequiredArguments =
    { filter : Fractal.InputObject.BlobFilter }


deleteBlob :
    DeleteBlobRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteBlobPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteBlob requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteBlob" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeBlobFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddEventRequiredArguments =
    { input : List Fractal.InputObject.AddEventInput }


addEvent :
    AddEventRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddEventPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addEvent requiredArgs____ object____ =
    Object.selectionForCompositeField "addEvent" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddEventInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateEventRequiredArguments =
    { input : Fractal.InputObject.UpdateEventInput }


updateEvent :
    UpdateEventRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateEventPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateEvent requiredArgs____ object____ =
    Object.selectionForCompositeField "updateEvent" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateEventInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteEventRequiredArguments =
    { filter : Fractal.InputObject.EventFilter }


deleteEvent :
    DeleteEventRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteEventPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteEvent requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteEvent" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeEventFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddEventFragmentRequiredArguments =
    { input : List Fractal.InputObject.AddEventFragmentInput }


addEventFragment :
    AddEventFragmentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddEventFragmentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addEventFragment requiredArgs____ object____ =
    Object.selectionForCompositeField "addEventFragment" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddEventFragmentInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateEventFragmentRequiredArguments =
    { input : Fractal.InputObject.UpdateEventFragmentInput }


updateEventFragment :
    UpdateEventFragmentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateEventFragmentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateEventFragment requiredArgs____ object____ =
    Object.selectionForCompositeField "updateEventFragment" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateEventFragmentInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteEventFragmentRequiredArguments =
    { filter : Fractal.InputObject.EventFragmentFilter }


deleteEventFragment :
    DeleteEventFragmentRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteEventFragmentPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteEventFragment requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteEventFragment" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeEventFragmentFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddContractOptionalArguments =
    { upsert : OptionalArgument Bool }


type alias AddContractRequiredArguments =
    { input : List Fractal.InputObject.AddContractInput }


addContract :
    (AddContractOptionalArguments -> AddContractOptionalArguments)
    -> AddContractRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddContractPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addContract fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { upsert = Absent }

        optionalArgs____ =
            [ Argument.optional "upsert" filledInOptionals____.upsert Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "addContract" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddContractInput |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateContractRequiredArguments =
    { input : Fractal.InputObject.UpdateContractInput }


updateContract :
    UpdateContractRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateContractPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateContract requiredArgs____ object____ =
    Object.selectionForCompositeField "updateContract" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateContractInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteContractRequiredArguments =
    { filter : Fractal.InputObject.ContractFilter }


deleteContract :
    DeleteContractRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteContractPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteContract requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteContract" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeContractFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddVoteOptionalArguments =
    { upsert : OptionalArgument Bool }


type alias AddVoteRequiredArguments =
    { input : List Fractal.InputObject.AddVoteInput }


addVote :
    (AddVoteOptionalArguments -> AddVoteOptionalArguments)
    -> AddVoteRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddVotePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addVote fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { upsert = Absent }

        optionalArgs____ =
            [ Argument.optional "upsert" filledInOptionals____.upsert Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "addVote" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddVoteInput |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateVoteRequiredArguments =
    { input : Fractal.InputObject.UpdateVoteInput }


updateVote :
    UpdateVoteRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateVotePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateVote requiredArgs____ object____ =
    Object.selectionForCompositeField "updateVote" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateVoteInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteVoteRequiredArguments =
    { filter : Fractal.InputObject.VoteFilter }


deleteVote :
    DeleteVoteRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteVotePayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteVote requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteVote" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeVoteFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddUserOptionalArguments =
    { upsert : OptionalArgument Bool }


type alias AddUserRequiredArguments =
    { input : List Fractal.InputObject.AddUserInput }


addUser :
    (AddUserOptionalArguments -> AddUserOptionalArguments)
    -> AddUserRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddUserPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addUser fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { upsert = Absent }

        optionalArgs____ =
            [ Argument.optional "upsert" filledInOptionals____.upsert Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "addUser" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddUserInput |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateUserRequiredArguments =
    { input : Fractal.InputObject.UpdateUserInput }


updateUser :
    UpdateUserRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateUserPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateUser requiredArgs____ object____ =
    Object.selectionForCompositeField "updateUser" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateUserInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteUserRequiredArguments =
    { filter : Fractal.InputObject.UserFilter }


deleteUser :
    DeleteUserRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteUserPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteUser requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteUser" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeUserFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddPendingUserOptionalArguments =
    { upsert : OptionalArgument Bool }


type alias AddPendingUserRequiredArguments =
    { input : List Fractal.InputObject.AddPendingUserInput }


addPendingUser :
    (AddPendingUserOptionalArguments -> AddPendingUserOptionalArguments)
    -> AddPendingUserRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddPendingUserPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addPendingUser fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { upsert = Absent }

        optionalArgs____ =
            [ Argument.optional "upsert" filledInOptionals____.upsert Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "addPendingUser" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddPendingUserInput |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdatePendingUserRequiredArguments =
    { input : Fractal.InputObject.UpdatePendingUserInput }


updatePendingUser :
    UpdatePendingUserRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdatePendingUserPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updatePendingUser requiredArgs____ object____ =
    Object.selectionForCompositeField "updatePendingUser" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdatePendingUserInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeletePendingUserRequiredArguments =
    { filter : Fractal.InputObject.PendingUserFilter }


deletePendingUser :
    DeletePendingUserRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeletePendingUserPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deletePendingUser requiredArgs____ object____ =
    Object.selectionForCompositeField "deletePendingUser" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodePendingUserFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddUserRightsRequiredArguments =
    { input : List Fractal.InputObject.AddUserRightsInput }


addUserRights :
    AddUserRightsRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddUserRightsPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addUserRights requiredArgs____ object____ =
    Object.selectionForCompositeField "addUserRights" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddUserRightsInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateUserRightsRequiredArguments =
    { input : Fractal.InputObject.UpdateUserRightsInput }


updateUserRights :
    UpdateUserRightsRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateUserRightsPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateUserRights requiredArgs____ object____ =
    Object.selectionForCompositeField "updateUserRights" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateUserRightsInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteUserRightsRequiredArguments =
    { filter : Fractal.InputObject.UserRightsFilter }


deleteUserRights :
    DeleteUserRightsRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteUserRightsPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteUserRights requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteUserRights" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeUserRightsFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddUserEventRequiredArguments =
    { input : List Fractal.InputObject.AddUserEventInput }


addUserEvent :
    AddUserEventRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddUserEventPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addUserEvent requiredArgs____ object____ =
    Object.selectionForCompositeField "addUserEvent" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddUserEventInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateUserEventRequiredArguments =
    { input : Fractal.InputObject.UpdateUserEventInput }


updateUserEvent :
    UpdateUserEventRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateUserEventPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateUserEvent requiredArgs____ object____ =
    Object.selectionForCompositeField "updateUserEvent" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateUserEventInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteUserEventRequiredArguments =
    { filter : Fractal.InputObject.UserEventFilter }


deleteUserEvent :
    DeleteUserEventRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteUserEventPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteUserEvent requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteUserEvent" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeUserEventFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddNotifRequiredArguments =
    { input : List Fractal.InputObject.AddNotifInput }


addNotif :
    AddNotifRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddNotifPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addNotif requiredArgs____ object____ =
    Object.selectionForCompositeField "addNotif" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddNotifInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateNotifRequiredArguments =
    { input : Fractal.InputObject.UpdateNotifInput }


updateNotif :
    UpdateNotifRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateNotifPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateNotif requiredArgs____ object____ =
    Object.selectionForCompositeField "updateNotif" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateNotifInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteNotifRequiredArguments =
    { filter : Fractal.InputObject.NotifFilter }


deleteNotif :
    DeleteNotifRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteNotifPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteNotif requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteNotif" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeNotifFilter ] object____ (Basics.identity >> Decode.nullable)


type alias AddEventCountRequiredArguments =
    { input : List Fractal.InputObject.AddEventCountInput }


addEventCount :
    AddEventCountRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.AddEventCountPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
addEventCount requiredArgs____ object____ =
    Object.selectionForCompositeField "addEventCount" [ Argument.required "input" requiredArgs____.input (Fractal.InputObject.encodeAddEventCountInput |> Encode.list) ] object____ (Basics.identity >> Decode.nullable)


type alias UpdateEventCountRequiredArguments =
    { input : Fractal.InputObject.UpdateEventCountInput }


updateEventCount :
    UpdateEventCountRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.UpdateEventCountPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
updateEventCount requiredArgs____ object____ =
    Object.selectionForCompositeField "updateEventCount" [ Argument.required "input" requiredArgs____.input Fractal.InputObject.encodeUpdateEventCountInput ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteEventCountRequiredArguments =
    { filter : Fractal.InputObject.EventCountFilter }


deleteEventCount :
    DeleteEventCountRequiredArguments
    -> SelectionSet decodesTo Fractal.Object.DeleteEventCountPayload
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteEventCount requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteEventCount" [ Argument.required "filter" requiredArgs____.filter Fractal.InputObject.encodeEventCountFilter ] object____ (Basics.identity >> Decode.nullable)

{"author":{"id":"18f2c617c6fcebe79492fa7bd83bc8f5cec4b7122b81bb960d7b21620c0bc4b3"},"ops":[{"type":1,"timestamp":1596063186,"nonce":"0kKoBQbe/bF9MVmJyhIlsC/wOhY=","title":"[tension] load tan content progressively","message":"Load title content and info then load tab content depending on context.","files":null},{"type":2,"timestamp":1596206000,"nonce":"EatIlmygbOZ46eRe9UBkGtD4AHI=","title":"[tension][Blob] WIP","was":"[tension] load tan content progressively"},{"type":6,"timestamp":1596212377,"nonce":"igbiFKH2VQ4R4KS/yv+rMcNmA1A=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\nset (push) Event field\nset (push) blobs (if any) -\u003e [backend] set head if event == blobComitted\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n**first \"blobCommitted\"**\n-\u003e ie when TensionAction = New*\n\ninsert tension ref in the node target, as simple as that.\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596240328,"nonce":"SX1u0QkDQzWn7NoxQZMtKP/lJDk=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596247254,"nonce":"C/VmX8w/E3sqkGbVnFCRdl8DFwc=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO\n* (1) for about, mandate\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596377100,"nonce":"Suuurjp+swU0pHzsByjgPl5mEzw=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO\n* (1) change Node.source as a mandatory field\n   * setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...)\n   * get node.source.id when getting node Data to provide the tension reference\n* (2) change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backedn ? user right/role ?)\n* (3) update tension views to see blob, history etc...\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596377269,"nonce":"GViFLft8+AHetohYjs7g8hjEjq4=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) change Node.source as a mandatory field\n   + setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + get node.source.id when getting node Data to provide the tension reference\n* (2) change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (3) update tension views to see blob, history etc...\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596378770,"nonce":"+Lbql4V14x5KZYCD04R4DRrQd5I=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) push event Field\n* (2) change Node.source as a mandatory field\n   + setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + get node.source.id when getting node Data to provide the tension reference\n* (3) change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) update tension views to see blob, history etc...\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596642009,"nonce":"NrkJjuRyQK5LZyCM1pIsP1PAjNA=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to see blob, history etc...\n* (5) [ ] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596646375,"nonce":"7XZKD9fhEa7MPwGA0c2zAbkrIrg=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [ ] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1596646418,"nonce":"tiFyO42IhtADjNOHkqYPsLUEF5E=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [ ] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n\n@Bug: not tension are not présent in CircleTension (HAHAHA tension ???)\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1597511592,"nonce":"iLTc79EYqWeAKXxLem8U1Hnz4TE=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [ ] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n\n@bug1: tension are absents in CircleTension (HAHAHA tension ???)\n@bug2: get node source incorect ... (getParentNode)\n@bug3: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1597577591,"nonce":"c8t4nOqxxugaVtFzxxIlPQFZylo=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [ ] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1597707751,"nonce":"9pkjEs/EJrxs+yc7ZW/t20LTCY8=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ ] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ ] get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1597882940,"nonce":"oZ6fVo/U7yI2wPMmtEje9FXTCLY=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ ] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ ] get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n\nWIP:\n* remove DoEditAbout and DoEditMande ? (right to propagate head ?)\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1598105360,"nonce":"XX4N5hTK1loAiDZI/hvUc5mBUHE=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ ] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ ] get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n    - add the mandatory field for each tension:  tension.history = [TensionEvent.init]\n    ? add the optional field for each node:  Node.source (need to seek tension)\n\nWIP:\n* remove DoEditAbout and DoEditMande ? (right to propagate head ?)\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1598200292,"nonce":"TOFHkfYzWr7f/EGjIUYjP5XBV+0=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everithing is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ ] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ ] get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n    - add the mandatory field for each tension:  tension.history = [TensionEvent.init]\n    ? add the optional field for each node:  Node.source (need to seek tension)\n\nWIP:\n* remove DoEditAbout and DoEditMande ? (right to propagate head ?)\n* remove circleAck !!!\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1601303085,"nonce":"jiQlazEGPiFgD87YPoThXyvb5RU=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everything is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ ] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ ] get node.source.id when getting node Data to provide the tension reference\n* (3) [ ] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [ ] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n    - add the mandatory field for each tension:  tension.history = [TensionEvent.init]\n    ? add the optional field for each node:  Node.source (need to seek tension)\n\nWIP:\n* remove DoEditAbout and DoEditMande ? (right to propagate head ?)\n* remove circleAck !!!\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1601305898,"nonce":"DeIxw5L3cSlLLnrM7DJ6/PiIweY=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everything is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [ ] change Node.source as a mandatory field\n   + [ ] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [ ] get node.source.id when getting node Data to provide the tension reference\n* (3) [x] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [x] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n    - add the mandatory field for each tension:  tension.history = [TensionEvent.init]\n    ? add the optional field for each node:  Node.source (need to seek tension)\n\nWIP:\n* [x] remove DoEditAbout and DoEditMande ? (right to propagate head ?)\n* [x] remove circleAck !!!\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":6,"timestamp":1601807044,"nonce":"VrGB4/UA8aYCQYeTC1pIyNgulrs=","target":"a0139a7e065661b3cd0c2c5eb76a2e23f39ba6680c82519e6fbed4087785da92","message":"Everything is a tension (v.0.2)\n\nWe like the analogy of the string theory, where everything is a string, and from string interaction born the mater.\nIn fractale, everithing is a tensions, from cirle to role, to adding and editing file.\n\n\ntension procédure\n\n**Adding \u0026 Patching Tension**\n\n[frontend] set (push) Event field\n[frontend] set (push) blobs (if any) -\u003e [backend] set head if event == blobComitted; (1) if TensionAction = New*; do insert tension ref in the node target.\n\t\t -\u003e [backend] [decoupled] iterate users to send email/notif (based on notification preferences)\n\n\nTODO:\n* (1) [x] push event Field (@DEBUG =\u003e event_type get duplicate if Ack (network) error...find better way of doing than List.append)\n* (2) [-] change Node.source as a mandatory field\n   + [-] setup Node.source at tension creation (@think multiple id creatoin with Node.tension_in getting also the new tension...) AND Tension.head when **commiting blob** (backend?)\n   + [+] get node.source.id when getting node Data to provide the tension reference\n* (3) [x] change DoNodeMandate and DoNodeMandate -\u003e TensionPatch (instead of new tension) + @think eventually add/update change (or in the backend ? user right/role ?)\n* (4) [x] update tension views to Load (TensionBlobs query, Msg etc) and View blob, history etc...\n* (5) [-] fix backend schema\n    + ./dg.py m -v Tension.action _null_\n    + ./dg.py m -v Tension.data _null_\n    - set all name with minuscule\n    - add the mandatory field for each tension:  tension.history = [TensionEvent.init]\n    ? add the optional field for each node:  Node.source (need to seek tension)\n\nWIP:\n* [x] remove DoEditAbout and DoEditMande ? (right to propagate head ?)\n* [x] remove circleAck !!!\n\n@fixed: wrong nameid codec for new sub role.\n@fixed: query ordered tension in circleTension to not missed any recent one\n@bug: avoid setting empty name/about etc\n\n\n\n=\u003e future!\n* ability to fork tension ! (forking an organisation is forking all tensions !)","files":null},{"type":4,"timestamp":1605794464,"nonce":"Hxp0RAkt++Zs3r++s41+AxEDZT4=","status":2}]}